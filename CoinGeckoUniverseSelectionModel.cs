/*
 * QUANTCONNECT.COM - Democratizing Finance, Empowering Individuals.
 * Lean Algorithmic Trading Engine v2.0. Copyright 2014 QuantConnect Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

using Python.Runtime;
using QuantConnect.Data;
using QuantConnect.Data.UniverseSelection;
using System;
using System.Collections.Generic;
using System.Linq;
using QuantConnect.Algorithm;
using QuantConnect.Algorithm.Framework.Selection;
using QuantConnect.Securities;

namespace QuantConnect.DataSource
{
    /// <summary>
    /// Universe Selection Model for Coin Gecko data which contains Price, Volume and Market Cap 
    /// </summary>
    public class CoinGeckoUniverseSelectionModel : UniverseSelectionModel
    {
        private Universe _universe;
        private UniverseSettings _universeSettings;
        private readonly Func<IEnumerable<CoinGecko>, IEnumerable<Symbol>> _selector;

        /// <summary>
        /// Initializes a new instance of the <see cref="CoinGeckoUniverseSelectionModel"/> class
        /// </summary>
        /// <param name="universeSettings">The settings used for new subscriptions generated by this universe</param>
        /// <param name="selector">Returns the symbols that should be included in the universe</param>
        public CoinGeckoUniverseSelectionModel(
            Func<IEnumerable<CoinGecko>, IEnumerable<Symbol>> selector,
            UniverseSettings universeSettings = null)
        {
            _universeSettings = universeSettings;
            _selector = selector;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoinGeckoUniverseSelectionModel"/> class
        /// </summary>
        /// <param name="universeSettings">The settings used for new subscriptions generated by this universe</param>
        /// <param name="selector">Returns the symbols that should be included in the universe</param>
        public CoinGeckoUniverseSelectionModel(
            PyObject selector,
            UniverseSettings universeSettings = null
        )
            : this(selector.ConvertPythonUniverseFilterFunction<CoinGecko>(), universeSettings)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CoinGeckoUniverseSelectionModel"/> class
        /// </summary>
        /// <param name="universeSettings">The settings used for new subscriptions generated by this universe</param>
        public CoinGeckoUniverseSelectionModel(UniverseSettings universeSettings = null)
            : this((Func<IEnumerable<CoinGecko>, IEnumerable<Symbol>>)null, universeSettings)
        {
            _universeSettings = universeSettings;
        }

        /// <summary>
        /// Defines the CoinGecko selection function.
        /// </summary>
        /// <param name="algorithm">The algorithm instance</param>
        /// <param name="data">The CoinGecko Universe data used to perform filtering</param>
        /// <exception cref="ArgumentNullException">The Selector cannot be null</exception>
        /// <returns>An enumerable of symbols passing the filter</returns>
        public virtual IEnumerable<Symbol> Selector(QCAlgorithm algorithm, IEnumerable<CoinGecko> data)
        {
            if (_selector != null)
            {
                return _selector(data);
            }

            throw new ArgumentNullException(nameof(_selector), "The Selector function cannot be null");
        }

        /// <summary>
        /// Creates a new fundamental universe using this class's selection functions
        /// </summary>
        /// <param name="algorithm">The algorithm instance to create universes for</param>
        /// <returns>The universe defined by this model</returns>
        public override IEnumerable<Universe> CreateUniverses(QCAlgorithm algorithm)
        {
            if (_universe != null)
            {
                yield return _universe;
            }

            var ticker = $"coingecko-universe-{Guid.NewGuid()}";
            var sid = SecurityIdentifier.GenerateCrypto(ticker, Market.GDAX);

            var config = new SubscriptionDataConfig(typeof(CoinGeckoUniverse),
                symbol: new Symbol(sid, ticker),
                resolution: Resolution.Daily,
                dataTimeZone: TimeZones.Utc,
                exchangeTimeZone: TimeZones.Utc,
                fillForward: false,
                extendedHours: true,
                isInternalFeed: true,
                isCustom: true,
                isFilteredSubscription: false);

            MarketHoursDatabase.FromDataFolder()
                .SetEntryAlwaysOpen(config.Market, ticker, config.SecurityType, config.DataTimeZone);

            _universe = new FuncUniverse(config, _universeSettings ??= algorithm.UniverseSettings,
                d => Selector(algorithm, d.OfType<CoinGecko>()));

            yield return _universe;
        }
    }
}